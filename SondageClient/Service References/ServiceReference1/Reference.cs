//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SondageClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Poll", Namespace="http://schemas.datacontract.org/2004/07/USherbrooke.ServiceModel.Sondage")]
    [System.SerializableAttribute()]
    public partial class Poll : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PollQuestion", Namespace="http://schemas.datacontract.org/2004/07/USherbrooke.ServiceModel.Sondage")]
    [System.SerializableAttribute()]
    public partial class PollQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PollIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PollId {
            get {
                return this.PollIdField;
            }
            set {
                if ((this.PollIdField.Equals(value) != true)) {
                    this.PollIdField = value;
                    this.RaisePropertyChanged("PollId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionId {
            get {
                return this.QuestionIdField;
            }
            set {
                if ((this.QuestionIdField.Equals(value) != true)) {
                    this.QuestionIdField = value;
                    this.RaisePropertyChanged("QuestionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://USherbrooke.ServiceModel.Sondage", ConfigurationName="ServiceReference1.ISondageService")]
    public interface ISondageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://USherbrooke.ServiceModel.Sondage/ISondageService/Connect", ReplyAction="http://USherbrooke.ServiceModel.Sondage/ISondageService/ConnectResponse")]
        int Connect(string name, string password, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://USherbrooke.ServiceModel.Sondage/ISondageService/Connect", ReplyAction="http://USherbrooke.ServiceModel.Sondage/ISondageService/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name, string password, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://USherbrooke.ServiceModel.Sondage/ISondageService/GetAvailablePolls", ReplyAction="http://USherbrooke.ServiceModel.Sondage/ISondageService/GetAvailablePollsResponse" +
            "")]
        SondageClient.ServiceReference1.Poll[] GetAvailablePolls(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://USherbrooke.ServiceModel.Sondage/ISondageService/GetAvailablePolls", ReplyAction="http://USherbrooke.ServiceModel.Sondage/ISondageService/GetAvailablePollsResponse" +
            "")]
        System.Threading.Tasks.Task<SondageClient.ServiceReference1.Poll[]> GetAvailablePollsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://USherbrooke.ServiceModel.Sondage/ISondageService/GetNext", ReplyAction="http://USherbrooke.ServiceModel.Sondage/ISondageService/GetNextResponse")]
        SondageClient.ServiceReference1.PollQuestion GetNext(int userId, SondageClient.ServiceReference1.PollQuestion answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://USherbrooke.ServiceModel.Sondage/ISondageService/GetNext", ReplyAction="http://USherbrooke.ServiceModel.Sondage/ISondageService/GetNextResponse")]
        System.Threading.Tasks.Task<SondageClient.ServiceReference1.PollQuestion> GetNextAsync(int userId, SondageClient.ServiceReference1.PollQuestion answer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISondageServiceChannel : SondageClient.ServiceReference1.ISondageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SondageServiceClient : System.ServiceModel.ClientBase<SondageClient.ServiceReference1.ISondageService>, SondageClient.ServiceReference1.ISondageService {
        
        public SondageServiceClient() {
        }
        
        public SondageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SondageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SondageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SondageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Connect(string name, string password, string token) {
            return base.Channel.Connect(name, password, token);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name, string password, string token) {
            return base.Channel.ConnectAsync(name, password, token);
        }
        
        public SondageClient.ServiceReference1.Poll[] GetAvailablePolls(int userId) {
            return base.Channel.GetAvailablePolls(userId);
        }
        
        public System.Threading.Tasks.Task<SondageClient.ServiceReference1.Poll[]> GetAvailablePollsAsync(int userId) {
            return base.Channel.GetAvailablePollsAsync(userId);
        }
        
        public SondageClient.ServiceReference1.PollQuestion GetNext(int userId, SondageClient.ServiceReference1.PollQuestion answer) {
            return base.Channel.GetNext(userId, answer);
        }
        
        public System.Threading.Tasks.Task<SondageClient.ServiceReference1.PollQuestion> GetNextAsync(int userId, SondageClient.ServiceReference1.PollQuestion answer) {
            return base.Channel.GetNextAsync(userId, answer);
        }
    }
}
